#!/usr/bin/env python3

import argparse
import uuid

parser = argparse.ArgumentParser(description="UUID utility tool")
parser.add_argument("-v", "--version", action="version", version="%(prog)s 1.0", help="Print version")

commands = parser.add_subparsers(dest="command", title = "commands", description = "Valid commands")
createCommand = commands.add_parser("create", help = "Create UUID")
createCommand.add_argument("-n", "--number", type = int, default = 1, help = "Number of uuid to create")

versionArgument = createCommand.add_mutually_exclusive_group()
versionArgument.add_argument("-1", "-t", "--timestamp", action = "store_true", help = "Timestamp UUID (type 1)")
versionArgument.add_argument("-4", "-r", "--random", action = "store_true", help = "Random UUID (type 4)")
versionArgument.add_argument("-3", "--md5", nargs = 2, metavar = ('namespace', 'name'), help = "MD5 Hash UUID (type 3)")
versionArgument.add_argument("-5", "--sha1", nargs = 2, metavar = ('namespace', 'name'), help = "SHA1 Hash UUID (type 5)")

args = parser.parse_args()


def create_uuid():
    'Create de new UUID'

    def create_timestamp_uuid(count):
        for i in range(count):
            print(uuid.uuid1())

    def create_random_uuid(count):
        for i in range(count):
            print(uuid.uuid4())

    def create_hash_uuid(namespace, name, method):
        ns = {
            'dns': uuid.NAMESPACE_DNS,
            'url': uuid.NAMESPACE_URL,
            'oid': uuid.NAMESPACE_OID,
            'x500': uuid.NAMESPACE_X500
        }.get(namespace.lower())
        if not ns:
            try:
                ns = uuid.UUID(namespace)
            except:
                createCommand.exit(1, "Invalid namespace, expected on of dns, url, oid, x500 or a valid UUID")
        print(method(ns, name))

    if args.timestamp:
        create_timestamp_uuid(args.number)
    elif args.random:
        create_random_uuid(args.number)
    elif args.md5:
        create_hash_uuid(args.md5[0], args.md5[1], uuid.uuid3)
    elif args.sha1:
        create_hash_uuid(args.sha1[0], args.sha1[1], uuid.uuid5)
    else:
        create_timestamp_uuid(args.number)

if args.command == 'create':
    create_uuid()
